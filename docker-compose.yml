services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: "postgres"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/postgres"
      SPRING_DATASOURCE_USERNAME: "postgres"
      SPRING_DATASOURCE_PASSWORD: "postgres"
      SPRING_DATA_REDIS_HOST: "redis-cache"
      SPRING_DATA_REDIS_PORT: "6379"
      SPRING_CACHE_REDIS_TIME-TO-LIVE: "60000"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    depends_on:
      postgres:
        condition: service_started
      redis-cache:
        condition: service_started
      kafka:
        condition: service_healthy

  postgres:
    image: postgres:17
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "postgres"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis-cache:
    image: redis:latest
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "bash", "-lc", "echo > /dev/tcp/localhost/9092"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - kafka-data:/bitnami/kafka

volumes:
  postgres-data:
  redis-data:
  kafka-data:
